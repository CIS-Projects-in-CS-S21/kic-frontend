// source: proto/health.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_common_pb = require('../proto/common_pb.js');
goog.object.extend(proto, proto_common_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.kic.health.AddHealthDataForUserRequest', null, global);
goog.exportSymbol('proto.kic.health.AddHealthDataForUserResponse', null, global);
goog.exportSymbol('proto.kic.health.DeleteHealthDataForUserRequest', null, global);
goog.exportSymbol('proto.kic.health.DeleteHealthDataForUserRequest.DataCase', null, global);
goog.exportSymbol('proto.kic.health.DeleteHealthDataForUserResponse', null, global);
goog.exportSymbol('proto.kic.health.GetHealthDataByDateRequest', null, global);
goog.exportSymbol('proto.kic.health.GetHealthDataByDateResponse', null, global);
goog.exportSymbol('proto.kic.health.GetHealthDataForUserRequest', null, global);
goog.exportSymbol('proto.kic.health.GetHealthDataForUserResponse', null, global);
goog.exportSymbol('proto.kic.health.GetMentalHealthScoreForUserRequest', null, global);
goog.exportSymbol('proto.kic.health.GetMentalHealthScoreForUserResponse', null, global);
goog.exportSymbol('proto.kic.health.MentalHealthLog', null, global);
goog.exportSymbol('proto.kic.health.UpdateHealthDataForDateRequest', null, global);
goog.exportSymbol('proto.kic.health.UpdateHealthDataForDateResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kic.health.GetHealthDataForUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kic.health.GetHealthDataForUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kic.health.GetHealthDataForUserRequest.displayName = 'proto.kic.health.GetHealthDataForUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kic.health.MentalHealthLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kic.health.MentalHealthLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kic.health.MentalHealthLog.displayName = 'proto.kic.health.MentalHealthLog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kic.health.GetHealthDataForUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kic.health.GetHealthDataForUserResponse.repeatedFields_, null);
};
goog.inherits(proto.kic.health.GetHealthDataForUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kic.health.GetHealthDataForUserResponse.displayName = 'proto.kic.health.GetHealthDataForUserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kic.health.GetHealthDataByDateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kic.health.GetHealthDataByDateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kic.health.GetHealthDataByDateRequest.displayName = 'proto.kic.health.GetHealthDataByDateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kic.health.GetHealthDataByDateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kic.health.GetHealthDataByDateResponse.repeatedFields_, null);
};
goog.inherits(proto.kic.health.GetHealthDataByDateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kic.health.GetHealthDataByDateResponse.displayName = 'proto.kic.health.GetHealthDataByDateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kic.health.AddHealthDataForUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kic.health.AddHealthDataForUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kic.health.AddHealthDataForUserRequest.displayName = 'proto.kic.health.AddHealthDataForUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kic.health.AddHealthDataForUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kic.health.AddHealthDataForUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kic.health.AddHealthDataForUserResponse.displayName = 'proto.kic.health.AddHealthDataForUserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kic.health.DeleteHealthDataForUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.kic.health.DeleteHealthDataForUserRequest.oneofGroups_);
};
goog.inherits(proto.kic.health.DeleteHealthDataForUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kic.health.DeleteHealthDataForUserRequest.displayName = 'proto.kic.health.DeleteHealthDataForUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kic.health.DeleteHealthDataForUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kic.health.DeleteHealthDataForUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kic.health.DeleteHealthDataForUserResponse.displayName = 'proto.kic.health.DeleteHealthDataForUserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kic.health.UpdateHealthDataForDateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kic.health.UpdateHealthDataForDateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kic.health.UpdateHealthDataForDateRequest.displayName = 'proto.kic.health.UpdateHealthDataForDateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kic.health.UpdateHealthDataForDateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kic.health.UpdateHealthDataForDateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kic.health.UpdateHealthDataForDateResponse.displayName = 'proto.kic.health.UpdateHealthDataForDateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kic.health.GetMentalHealthScoreForUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kic.health.GetMentalHealthScoreForUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kic.health.GetMentalHealthScoreForUserRequest.displayName = 'proto.kic.health.GetMentalHealthScoreForUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kic.health.GetMentalHealthScoreForUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kic.health.GetMentalHealthScoreForUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kic.health.GetMentalHealthScoreForUserResponse.displayName = 'proto.kic.health.GetMentalHealthScoreForUserResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kic.health.GetHealthDataForUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kic.health.GetHealthDataForUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kic.health.GetHealthDataForUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.GetHealthDataForUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kic.health.GetHealthDataForUserRequest}
 */
proto.kic.health.GetHealthDataForUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kic.health.GetHealthDataForUserRequest;
  return proto.kic.health.GetHealthDataForUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kic.health.GetHealthDataForUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kic.health.GetHealthDataForUserRequest}
 */
proto.kic.health.GetHealthDataForUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kic.health.GetHealthDataForUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kic.health.GetHealthDataForUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kic.health.GetHealthDataForUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.GetHealthDataForUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.kic.health.GetHealthDataForUserRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.kic.health.GetHealthDataForUserRequest} returns this
 */
proto.kic.health.GetHealthDataForUserRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kic.health.MentalHealthLog.prototype.toObject = function(opt_includeInstance) {
  return proto.kic.health.MentalHealthLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kic.health.MentalHealthLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.MentalHealthLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    logdate: (f = msg.getLogdate()) && proto_common_pb.Date.toObject(includeInstance, f),
    score: jspb.Message.getFieldWithDefault(msg, 2, 0),
    journalname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kic.health.MentalHealthLog}
 */
proto.kic.health.MentalHealthLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kic.health.MentalHealthLog;
  return proto.kic.health.MentalHealthLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kic.health.MentalHealthLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kic.health.MentalHealthLog}
 */
proto.kic.health.MentalHealthLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_common_pb.Date;
      reader.readMessage(value,proto_common_pb.Date.deserializeBinaryFromReader);
      msg.setLogdate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJournalname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kic.health.MentalHealthLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kic.health.MentalHealthLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kic.health.MentalHealthLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.MentalHealthLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_common_pb.Date.serializeBinaryToWriter
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getJournalname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional kic.common.Date logDate = 1;
 * @return {?proto.kic.common.Date}
 */
proto.kic.health.MentalHealthLog.prototype.getLogdate = function() {
  return /** @type{?proto.kic.common.Date} */ (
    jspb.Message.getWrapperField(this, proto_common_pb.Date, 1));
};


/**
 * @param {?proto.kic.common.Date|undefined} value
 * @return {!proto.kic.health.MentalHealthLog} returns this
*/
proto.kic.health.MentalHealthLog.prototype.setLogdate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kic.health.MentalHealthLog} returns this
 */
proto.kic.health.MentalHealthLog.prototype.clearLogdate = function() {
  return this.setLogdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kic.health.MentalHealthLog.prototype.hasLogdate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 score = 2;
 * @return {number}
 */
proto.kic.health.MentalHealthLog.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.kic.health.MentalHealthLog} returns this
 */
proto.kic.health.MentalHealthLog.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string journalName = 3;
 * @return {string}
 */
proto.kic.health.MentalHealthLog.prototype.getJournalname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.kic.health.MentalHealthLog} returns this
 */
proto.kic.health.MentalHealthLog.prototype.setJournalname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 userID = 4;
 * @return {number}
 */
proto.kic.health.MentalHealthLog.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.kic.health.MentalHealthLog} returns this
 */
proto.kic.health.MentalHealthLog.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kic.health.GetHealthDataForUserResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kic.health.GetHealthDataForUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kic.health.GetHealthDataForUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kic.health.GetHealthDataForUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.GetHealthDataForUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    healthdataList: jspb.Message.toObjectList(msg.getHealthdataList(),
    proto.kic.health.MentalHealthLog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kic.health.GetHealthDataForUserResponse}
 */
proto.kic.health.GetHealthDataForUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kic.health.GetHealthDataForUserResponse;
  return proto.kic.health.GetHealthDataForUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kic.health.GetHealthDataForUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kic.health.GetHealthDataForUserResponse}
 */
proto.kic.health.GetHealthDataForUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kic.health.MentalHealthLog;
      reader.readMessage(value,proto.kic.health.MentalHealthLog.deserializeBinaryFromReader);
      msg.addHealthdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kic.health.GetHealthDataForUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kic.health.GetHealthDataForUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kic.health.GetHealthDataForUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.GetHealthDataForUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHealthdataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.kic.health.MentalHealthLog.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MentalHealthLog healthData = 1;
 * @return {!Array<!proto.kic.health.MentalHealthLog>}
 */
proto.kic.health.GetHealthDataForUserResponse.prototype.getHealthdataList = function() {
  return /** @type{!Array<!proto.kic.health.MentalHealthLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kic.health.MentalHealthLog, 1));
};


/**
 * @param {!Array<!proto.kic.health.MentalHealthLog>} value
 * @return {!proto.kic.health.GetHealthDataForUserResponse} returns this
*/
proto.kic.health.GetHealthDataForUserResponse.prototype.setHealthdataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.kic.health.MentalHealthLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kic.health.MentalHealthLog}
 */
proto.kic.health.GetHealthDataForUserResponse.prototype.addHealthdata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.kic.health.MentalHealthLog, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kic.health.GetHealthDataForUserResponse} returns this
 */
proto.kic.health.GetHealthDataForUserResponse.prototype.clearHealthdataList = function() {
  return this.setHealthdataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kic.health.GetHealthDataByDateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kic.health.GetHealthDataByDateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kic.health.GetHealthDataByDateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.GetHealthDataByDateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    logdate: (f = msg.getLogdate()) && proto_common_pb.Date.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kic.health.GetHealthDataByDateRequest}
 */
proto.kic.health.GetHealthDataByDateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kic.health.GetHealthDataByDateRequest;
  return proto.kic.health.GetHealthDataByDateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kic.health.GetHealthDataByDateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kic.health.GetHealthDataByDateRequest}
 */
proto.kic.health.GetHealthDataByDateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = new proto_common_pb.Date;
      reader.readMessage(value,proto_common_pb.Date.deserializeBinaryFromReader);
      msg.setLogdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kic.health.GetHealthDataByDateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kic.health.GetHealthDataByDateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kic.health.GetHealthDataByDateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.GetHealthDataByDateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLogdate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_common_pb.Date.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.kic.health.GetHealthDataByDateRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.kic.health.GetHealthDataByDateRequest} returns this
 */
proto.kic.health.GetHealthDataByDateRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional kic.common.Date logDate = 2;
 * @return {?proto.kic.common.Date}
 */
proto.kic.health.GetHealthDataByDateRequest.prototype.getLogdate = function() {
  return /** @type{?proto.kic.common.Date} */ (
    jspb.Message.getWrapperField(this, proto_common_pb.Date, 2));
};


/**
 * @param {?proto.kic.common.Date|undefined} value
 * @return {!proto.kic.health.GetHealthDataByDateRequest} returns this
*/
proto.kic.health.GetHealthDataByDateRequest.prototype.setLogdate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kic.health.GetHealthDataByDateRequest} returns this
 */
proto.kic.health.GetHealthDataByDateRequest.prototype.clearLogdate = function() {
  return this.setLogdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kic.health.GetHealthDataByDateRequest.prototype.hasLogdate = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kic.health.GetHealthDataByDateResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kic.health.GetHealthDataByDateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kic.health.GetHealthDataByDateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kic.health.GetHealthDataByDateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.GetHealthDataByDateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    healthdataList: jspb.Message.toObjectList(msg.getHealthdataList(),
    proto.kic.health.MentalHealthLog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kic.health.GetHealthDataByDateResponse}
 */
proto.kic.health.GetHealthDataByDateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kic.health.GetHealthDataByDateResponse;
  return proto.kic.health.GetHealthDataByDateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kic.health.GetHealthDataByDateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kic.health.GetHealthDataByDateResponse}
 */
proto.kic.health.GetHealthDataByDateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kic.health.MentalHealthLog;
      reader.readMessage(value,proto.kic.health.MentalHealthLog.deserializeBinaryFromReader);
      msg.addHealthdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kic.health.GetHealthDataByDateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kic.health.GetHealthDataByDateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kic.health.GetHealthDataByDateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.GetHealthDataByDateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHealthdataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.kic.health.MentalHealthLog.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MentalHealthLog healthData = 1;
 * @return {!Array<!proto.kic.health.MentalHealthLog>}
 */
proto.kic.health.GetHealthDataByDateResponse.prototype.getHealthdataList = function() {
  return /** @type{!Array<!proto.kic.health.MentalHealthLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kic.health.MentalHealthLog, 1));
};


/**
 * @param {!Array<!proto.kic.health.MentalHealthLog>} value
 * @return {!proto.kic.health.GetHealthDataByDateResponse} returns this
*/
proto.kic.health.GetHealthDataByDateResponse.prototype.setHealthdataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.kic.health.MentalHealthLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kic.health.MentalHealthLog}
 */
proto.kic.health.GetHealthDataByDateResponse.prototype.addHealthdata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.kic.health.MentalHealthLog, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kic.health.GetHealthDataByDateResponse} returns this
 */
proto.kic.health.GetHealthDataByDateResponse.prototype.clearHealthdataList = function() {
  return this.setHealthdataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kic.health.AddHealthDataForUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kic.health.AddHealthDataForUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kic.health.AddHealthDataForUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.AddHealthDataForUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    newentry: (f = msg.getNewentry()) && proto.kic.health.MentalHealthLog.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kic.health.AddHealthDataForUserRequest}
 */
proto.kic.health.AddHealthDataForUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kic.health.AddHealthDataForUserRequest;
  return proto.kic.health.AddHealthDataForUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kic.health.AddHealthDataForUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kic.health.AddHealthDataForUserRequest}
 */
proto.kic.health.AddHealthDataForUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = new proto.kic.health.MentalHealthLog;
      reader.readMessage(value,proto.kic.health.MentalHealthLog.deserializeBinaryFromReader);
      msg.setNewentry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kic.health.AddHealthDataForUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kic.health.AddHealthDataForUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kic.health.AddHealthDataForUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.AddHealthDataForUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNewentry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.kic.health.MentalHealthLog.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.kic.health.AddHealthDataForUserRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.kic.health.AddHealthDataForUserRequest} returns this
 */
proto.kic.health.AddHealthDataForUserRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional MentalHealthLog newEntry = 2;
 * @return {?proto.kic.health.MentalHealthLog}
 */
proto.kic.health.AddHealthDataForUserRequest.prototype.getNewentry = function() {
  return /** @type{?proto.kic.health.MentalHealthLog} */ (
    jspb.Message.getWrapperField(this, proto.kic.health.MentalHealthLog, 2));
};


/**
 * @param {?proto.kic.health.MentalHealthLog|undefined} value
 * @return {!proto.kic.health.AddHealthDataForUserRequest} returns this
*/
proto.kic.health.AddHealthDataForUserRequest.prototype.setNewentry = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kic.health.AddHealthDataForUserRequest} returns this
 */
proto.kic.health.AddHealthDataForUserRequest.prototype.clearNewentry = function() {
  return this.setNewentry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kic.health.AddHealthDataForUserRequest.prototype.hasNewentry = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kic.health.AddHealthDataForUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kic.health.AddHealthDataForUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kic.health.AddHealthDataForUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.AddHealthDataForUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kic.health.AddHealthDataForUserResponse}
 */
proto.kic.health.AddHealthDataForUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kic.health.AddHealthDataForUserResponse;
  return proto.kic.health.AddHealthDataForUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kic.health.AddHealthDataForUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kic.health.AddHealthDataForUserResponse}
 */
proto.kic.health.AddHealthDataForUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kic.health.AddHealthDataForUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kic.health.AddHealthDataForUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kic.health.AddHealthDataForUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.AddHealthDataForUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.kic.health.AddHealthDataForUserResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.kic.health.AddHealthDataForUserResponse} returns this
 */
proto.kic.health.AddHealthDataForUserResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.kic.health.DeleteHealthDataForUserRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.kic.health.DeleteHealthDataForUserRequest.DataCase = {
  DATA_NOT_SET: 0,
  ALL: 2,
  DATETOREMOVE: 3
};

/**
 * @return {proto.kic.health.DeleteHealthDataForUserRequest.DataCase}
 */
proto.kic.health.DeleteHealthDataForUserRequest.prototype.getDataCase = function() {
  return /** @type {proto.kic.health.DeleteHealthDataForUserRequest.DataCase} */(jspb.Message.computeOneofCase(this, proto.kic.health.DeleteHealthDataForUserRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kic.health.DeleteHealthDataForUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kic.health.DeleteHealthDataForUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kic.health.DeleteHealthDataForUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.DeleteHealthDataForUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    all: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    datetoremove: (f = msg.getDatetoremove()) && proto_common_pb.Date.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kic.health.DeleteHealthDataForUserRequest}
 */
proto.kic.health.DeleteHealthDataForUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kic.health.DeleteHealthDataForUserRequest;
  return proto.kic.health.DeleteHealthDataForUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kic.health.DeleteHealthDataForUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kic.health.DeleteHealthDataForUserRequest}
 */
proto.kic.health.DeleteHealthDataForUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAll(value);
      break;
    case 3:
      var value = new proto_common_pb.Date;
      reader.readMessage(value,proto_common_pb.Date.deserializeBinaryFromReader);
      msg.setDatetoremove(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kic.health.DeleteHealthDataForUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kic.health.DeleteHealthDataForUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kic.health.DeleteHealthDataForUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.DeleteHealthDataForUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDatetoremove();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto_common_pb.Date.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.kic.health.DeleteHealthDataForUserRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.kic.health.DeleteHealthDataForUserRequest} returns this
 */
proto.kic.health.DeleteHealthDataForUserRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool all = 2;
 * @return {boolean}
 */
proto.kic.health.DeleteHealthDataForUserRequest.prototype.getAll = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.kic.health.DeleteHealthDataForUserRequest} returns this
 */
proto.kic.health.DeleteHealthDataForUserRequest.prototype.setAll = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.kic.health.DeleteHealthDataForUserRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kic.health.DeleteHealthDataForUserRequest} returns this
 */
proto.kic.health.DeleteHealthDataForUserRequest.prototype.clearAll = function() {
  return jspb.Message.setOneofField(this, 2, proto.kic.health.DeleteHealthDataForUserRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kic.health.DeleteHealthDataForUserRequest.prototype.hasAll = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional kic.common.Date dateToRemove = 3;
 * @return {?proto.kic.common.Date}
 */
proto.kic.health.DeleteHealthDataForUserRequest.prototype.getDatetoremove = function() {
  return /** @type{?proto.kic.common.Date} */ (
    jspb.Message.getWrapperField(this, proto_common_pb.Date, 3));
};


/**
 * @param {?proto.kic.common.Date|undefined} value
 * @return {!proto.kic.health.DeleteHealthDataForUserRequest} returns this
*/
proto.kic.health.DeleteHealthDataForUserRequest.prototype.setDatetoremove = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.kic.health.DeleteHealthDataForUserRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kic.health.DeleteHealthDataForUserRequest} returns this
 */
proto.kic.health.DeleteHealthDataForUserRequest.prototype.clearDatetoremove = function() {
  return this.setDatetoremove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kic.health.DeleteHealthDataForUserRequest.prototype.hasDatetoremove = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kic.health.DeleteHealthDataForUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kic.health.DeleteHealthDataForUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kic.health.DeleteHealthDataForUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.DeleteHealthDataForUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    entriesdeleted: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kic.health.DeleteHealthDataForUserResponse}
 */
proto.kic.health.DeleteHealthDataForUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kic.health.DeleteHealthDataForUserResponse;
  return proto.kic.health.DeleteHealthDataForUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kic.health.DeleteHealthDataForUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kic.health.DeleteHealthDataForUserResponse}
 */
proto.kic.health.DeleteHealthDataForUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEntriesdeleted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kic.health.DeleteHealthDataForUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kic.health.DeleteHealthDataForUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kic.health.DeleteHealthDataForUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.DeleteHealthDataForUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntriesdeleted();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 entriesDeleted = 1;
 * @return {number}
 */
proto.kic.health.DeleteHealthDataForUserResponse.prototype.getEntriesdeleted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.kic.health.DeleteHealthDataForUserResponse} returns this
 */
proto.kic.health.DeleteHealthDataForUserResponse.prototype.setEntriesdeleted = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kic.health.UpdateHealthDataForDateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kic.health.UpdateHealthDataForDateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kic.health.UpdateHealthDataForDateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.UpdateHealthDataForDateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    desiredloginfo: (f = msg.getDesiredloginfo()) && proto.kic.health.MentalHealthLog.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kic.health.UpdateHealthDataForDateRequest}
 */
proto.kic.health.UpdateHealthDataForDateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kic.health.UpdateHealthDataForDateRequest;
  return proto.kic.health.UpdateHealthDataForDateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kic.health.UpdateHealthDataForDateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kic.health.UpdateHealthDataForDateRequest}
 */
proto.kic.health.UpdateHealthDataForDateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = new proto.kic.health.MentalHealthLog;
      reader.readMessage(value,proto.kic.health.MentalHealthLog.deserializeBinaryFromReader);
      msg.setDesiredloginfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kic.health.UpdateHealthDataForDateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kic.health.UpdateHealthDataForDateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kic.health.UpdateHealthDataForDateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.UpdateHealthDataForDateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDesiredloginfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.kic.health.MentalHealthLog.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.kic.health.UpdateHealthDataForDateRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.kic.health.UpdateHealthDataForDateRequest} returns this
 */
proto.kic.health.UpdateHealthDataForDateRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional MentalHealthLog desiredLogInfo = 2;
 * @return {?proto.kic.health.MentalHealthLog}
 */
proto.kic.health.UpdateHealthDataForDateRequest.prototype.getDesiredloginfo = function() {
  return /** @type{?proto.kic.health.MentalHealthLog} */ (
    jspb.Message.getWrapperField(this, proto.kic.health.MentalHealthLog, 2));
};


/**
 * @param {?proto.kic.health.MentalHealthLog|undefined} value
 * @return {!proto.kic.health.UpdateHealthDataForDateRequest} returns this
*/
proto.kic.health.UpdateHealthDataForDateRequest.prototype.setDesiredloginfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kic.health.UpdateHealthDataForDateRequest} returns this
 */
proto.kic.health.UpdateHealthDataForDateRequest.prototype.clearDesiredloginfo = function() {
  return this.setDesiredloginfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kic.health.UpdateHealthDataForDateRequest.prototype.hasDesiredloginfo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kic.health.UpdateHealthDataForDateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kic.health.UpdateHealthDataForDateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kic.health.UpdateHealthDataForDateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.UpdateHealthDataForDateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kic.health.UpdateHealthDataForDateResponse}
 */
proto.kic.health.UpdateHealthDataForDateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kic.health.UpdateHealthDataForDateResponse;
  return proto.kic.health.UpdateHealthDataForDateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kic.health.UpdateHealthDataForDateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kic.health.UpdateHealthDataForDateResponse}
 */
proto.kic.health.UpdateHealthDataForDateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kic.health.UpdateHealthDataForDateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kic.health.UpdateHealthDataForDateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kic.health.UpdateHealthDataForDateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.UpdateHealthDataForDateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.kic.health.UpdateHealthDataForDateResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.kic.health.UpdateHealthDataForDateResponse} returns this
 */
proto.kic.health.UpdateHealthDataForDateResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kic.health.GetMentalHealthScoreForUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kic.health.GetMentalHealthScoreForUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kic.health.GetMentalHealthScoreForUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.GetMentalHealthScoreForUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kic.health.GetMentalHealthScoreForUserRequest}
 */
proto.kic.health.GetMentalHealthScoreForUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kic.health.GetMentalHealthScoreForUserRequest;
  return proto.kic.health.GetMentalHealthScoreForUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kic.health.GetMentalHealthScoreForUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kic.health.GetMentalHealthScoreForUserRequest}
 */
proto.kic.health.GetMentalHealthScoreForUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kic.health.GetMentalHealthScoreForUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kic.health.GetMentalHealthScoreForUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kic.health.GetMentalHealthScoreForUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.GetMentalHealthScoreForUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.kic.health.GetMentalHealthScoreForUserRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.kic.health.GetMentalHealthScoreForUserRequest} returns this
 */
proto.kic.health.GetMentalHealthScoreForUserRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kic.health.GetMentalHealthScoreForUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kic.health.GetMentalHealthScoreForUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kic.health.GetMentalHealthScoreForUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.GetMentalHealthScoreForUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    score: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kic.health.GetMentalHealthScoreForUserResponse}
 */
proto.kic.health.GetMentalHealthScoreForUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kic.health.GetMentalHealthScoreForUserResponse;
  return proto.kic.health.GetMentalHealthScoreForUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kic.health.GetMentalHealthScoreForUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kic.health.GetMentalHealthScoreForUserResponse}
 */
proto.kic.health.GetMentalHealthScoreForUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kic.health.GetMentalHealthScoreForUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kic.health.GetMentalHealthScoreForUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kic.health.GetMentalHealthScoreForUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kic.health.GetMentalHealthScoreForUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 score = 1;
 * @return {number}
 */
proto.kic.health.GetMentalHealthScoreForUserResponse.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.kic.health.GetMentalHealthScoreForUserResponse} returns this
 */
proto.kic.health.GetMentalHealthScoreForUserResponse.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


goog.object.extend(exports, proto.kic.health);
